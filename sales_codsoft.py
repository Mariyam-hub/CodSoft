# -*- coding: utf-8 -*-
"""Sales.CodSoft

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AH5cXg8GyrqjK-2FJEYJ48k2QhgUPgdU
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the advertising dataset
data_url = "/content/advertising.csv"
df = pd.read_csv(data_url)

# Display the first few rows
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Rename columns for simplicity (optional)
df.rename(columns={'TV': 'TV_Ad', 'Radio': 'Radio_Ad', 'Newspaper': 'Newspaper_Ad'}, inplace=True)

# Summary statistics
print(df.describe())

plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

sns.pairplot(df, diag_kind='kde')
plt.show()

# Define features (X) and target (y)
X = df[['TV_Ad', 'Radio_Ad', 'Newspaper_Ad']]
y = df['Sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Model coefficients
print("Model Coefficients:", model.coef_)
print("Model Intercept:", model.intercept_)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R2 Score:", r2)

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--r', linewidth=2)
plt.title('Actual vs. Predicted Sales')
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.show()

coefficients = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})
coefficients = coefficients.sort_values(by='Coefficient', ascending=False)

plt.figure(figsize=(8, 6))
sns.barplot(x='Coefficient', y='Feature', data=coefficients, palette='viridis')
plt.title('Feature Importance (Linear Regression Coefficients)')
plt.xlabel('Coefficient Value')
plt.ylabel('Feature')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Example data (replace with actual data)
advertising_expenditure = [100, 200, 300, 400, 500]
sales = [50, 100, 150, 200, 250]

# Create scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(advertising_expenditure, sales, color='blue')
plt.title("Sales vs Advertising Expenditure")
plt.xlabel("Advertising Expenditure")
plt.ylabel("Sales")
plt.grid(True)
plt.show()

audience_segments = ['18-25', '26-35', '36-45', '46-55', '56+']
sales_by_segment = [120, 200, 180, 150, 100]

# Create bar chart
plt.figure(figsize=(8, 6))
sns.barplot(x=audience_segments, y=sales_by_segment, palette="Blues_d")
plt.title("Sales by Target Audience Segment")
plt.xlabel("Age Group")
plt.ylabel("Sales")
plt.show()

actual_sales = [50, 100, 150, 200, 250]
predicted_sales = [52, 98, 148, 202, 245]

# Create line plot
plt.figure(figsize=(8, 6))
plt.plot(actual_sales, label="Actual Sales", marker='o')
plt.plot(predicted_sales, label="Predicted Sales", marker='x')
plt.title("Actual vs Predicted Sales")
plt.xlabel("Data Points")
plt.ylabel("Sales")
plt.legend()
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np

# Example data (replace with actual data)
data = {
    'Advertising Expenditure': [100, 200, 300, 400, 500],
    'Target Audience Reach': [120, 200, 250, 300, 350],
    'Sales': [50, 100, 150, 200, 250]
}

df = pd.DataFrame(data)

# Create correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title("Correlation Heatmap")
plt.show()

time_periods = ['Jan', 'Feb', 'Mar', 'Apr', 'May']
sales_trend = [100, 150, 200, 180, 250]

# Create line plot
plt.figure(figsize=(8, 6))
plt.plot(time_periods, sales_trend, marker='o', color='green')
plt.title("Sales Trend Over Time")
plt.xlabel("Time Period")
plt.ylabel("Sales")
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Example data (replace with actual data)
platforms = ['TV', 'Social Media', 'Radio', 'Newspaper']
sales_distribution = [50, 30, 10, 10]

# Create a pie chart
plt.figure(figsize=(8, 6))
plt.pie(sales_distribution, labels=platforms, autopct='%1.1f%%', startangle=140, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
plt.title("Sales Distribution by Advertising Platform")
plt.show()

# Example data (replace with actual data)
cumulative_actual = [sum(actual_sales[:i+1]) for i in range(len(actual_sales))]
cumulative_predicted = [sum(predicted_sales[:i+1]) for i in range(len(predicted_sales))]

# Create an area plot
plt.figure(figsize=(10, 6))
plt.fill_between(time_periods, cumulative_actual, color='blue', alpha=0.3, label='Cumulative Actual Sales')
plt.fill_between(time_periods, cumulative_predicted, color='red', alpha=0.3, label='Cumulative Predicted Sales')
plt.title("Cumulative Sales Prediction")
plt.xlabel("Time Period")
plt.ylabel("Cumulative Sales")
plt.legend()
plt.grid(True)
plt.show()

# Example data (replace with actual data)
errors = [a - p for a, p in zip(actual_sales, predicted_sales)]

# Create a histogram
plt.figure(figsize=(10, 6))
plt.hist(errors, bins=10, color='green', alpha=0.7)
plt.title("Sales Prediction Error Distribution")
plt.xlabel("Prediction Error (Actual - Predicted)")
plt.ylabel("Frequency")
plt.grid(True)
plt.show()

import seaborn as sns

# Example data (replace with actual data)
residuals = [a - p for a, p in zip(actual_sales, predicted_sales)]

# Create a residual plot
plt.figure(figsize=(10, 6))
sns.residplot(x=predicted_sales, y=residuals, lowess=True, line_kws={'color': 'red'})
plt.title("Residual Plot (Prediction Error)")
plt.xlabel("Predicted Sales")
plt.ylabel("Residuals (Actual - Predicted)")
plt.grid(True)
plt.show()

# Example data (replace with actual data)
time_periods = ['Jan', 'Feb', 'Mar', 'Apr', 'May']
actual_sales = [100, 150, 200, 250, 300]
predicted_sales = [105, 148, 198, 255, 295]

# Create a bar chart
import numpy as np
x = np.arange(len(time_periods))
width = 0.35  # width of the bars

plt.figure(figsize=(10, 6))
plt.bar(x - width/2, actual_sales, width, label='Actual Sales', color='blue')
plt.bar(x + width/2, predicted_sales, width, label='Predicted Sales', color='red')
plt.title("Sales Prediction Comparison")
plt.xlabel("Time Period")
plt.ylabel("Sales")
plt.xticks(x, time_periods)
plt.legend()
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Example data (replace with actual data)
actual_sales = [100, 150, 200, 250, 300]
predicted_sales = [105, 148, 198, 255, 295]

# Create a line plot
plt.figure(figsize=(10, 6))
plt.plot(actual_sales, label="Actual Sales", marker='o', linestyle='-', color='blue')
plt.plot(predicted_sales, label="Predicted Sales", marker='x', linestyle='--', color='red')
plt.title("Sales Prediction vs Actual Sales")
plt.xlabel("Time Period")
plt.ylabel("Sales")
plt.legend()
plt.grid(True)
plt.show()